package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func main() {
	rootFolder := "."
	// scroll through all sub-directories from the route to search for files containing mocks
	err := filepath.Walk(rootFolder, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			// if the file contains the string 'mock' then I assume it contains the mocks generated by the mockgen library
			fileName := filepath.Base(path)
			if strings.Contains(fileName, "mock") {
				// execute the mockgen command to generate the found mocks again
				refreshMockGen(path)
			}
		}
		return nil
	})
	if err != nil {
		fmt.Println("Error reading the folder:", err)
	}
}

// refreshMockGen from the mock file path calls the execution of mockgen
// to generate mocks again in case changes have been made to the interface.
//
// To generate mocks, the mockgen library needs to know the path to the source, destination and package:
//   - The source is obtained by concatenating the path to the mock file and the name of the file
//     that generated the mocks the previous time (present on the second line of the mock files generated by the library);
//   - The destination is the file path of the mock file;
//   - The package is the name of the folder containing the mock file concatenated with "_test";
func refreshMockGen(pathMockFile string) {
	fileName := filepath.Base(pathMockFile)
	// check if file is mock
	if !strings.Contains(fileName, "mock") {
		return
	}
	fmt.Println("mock file path:", pathMockFile)
	// read the file
	file, err := os.Open(pathMockFile)
	if err != nil {
		panic(fmt.Sprintf("Error opening file: %v", err))
	}
	defer file.Close()
	reader := bufio.NewReader(file)
	// scroll through the contents of the file line by line
	for i := 0; i < 2; i++ {
		line, err := reader.ReadString('\n')
		if err != nil {
			break
		}
		// the name of the source is on the second line
		if i == 1 {
			// construct the path to the source file from the route.
			// to avoid errors I extract the file name and concatenate it to the mock file path
			// extract the source path
			sourcePath := strings.TrimSpace(line[11:])
			newSourceFilePath := filepath.Join(filepath.Dir(pathMockFile), filepath.Base(sourcePath))
			// get package
			packageFolder := fmt.Sprintf("%v_test", filepath.Base(filepath.Dir(pathMockFile)))
			// add arguments
			args := []string{"-source", newSourceFilePath, "-destination", pathMockFile, "-package", packageFolder}
			fmt.Println(args)
			cmd := "mockgen"
			// execute command
			if _, err := exec.Command(cmd, args...).Output(); err != nil {
				panic(fmt.Sprintf("Command Execution Error: %v", err))
			}
		}
	}
}
